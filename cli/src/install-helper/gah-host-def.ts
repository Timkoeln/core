import { GahModuleBase } from './gah-module-base';
import { IFileSystemService, GahHost } from '@awdware/gah-shared';
import { GahModuleDef } from './gah-module-def';
import { GahFolder } from './gah-folder';

export class GahHostDef extends GahModuleBase {

  constructor(gahCfgPath: string, fileSystemService: IFileSystemService) {
    super(gahCfgPath, null, fileSystemService);

    this.srcBasePath = './src';

    const hostCfg = this.fileSystemService.parseFile<GahHost>(gahCfgPath);
    if (!hostCfg) {
      throw new Error('Cannot find host in file "' + gahCfgPath + '"');
    }
    hostCfg.modules?.forEach(moduleDependency => {
      moduleDependency.names.forEach(moduleName => {
        this.dependencies.push(new GahModuleDef(moduleDependency.path, moduleName, fileSystemService));
      });
    });

    this.gahFolder = new GahFolder(this.basePath, this.srcBasePath + '/app', this.fileSystemService);
  }

  public async install() {
    this.tsConfigFile.clean();
    this.gahFolder.cleanGeneratedDirectory();
    this.gahFolder.cleanDependencyDirectory();
    this.gahFolder.cleanStylesDirectory();

    this.fileSystemService.deleteFilesInDirectory(this.fileSystemService.join(this.basePath, this.srcBasePath, 'assets'));
    this.fileSystemService.ensureDirectory(this.fileSystemService.join(this.basePath, this.srcBasePath, 'assets'));
    this.fileSystemService.deleteFile(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'));
    this.fileSystemService.saveFile(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'), '/*\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  *   Please do not edit this file. Any changes to this file will be overwriten by gah.   *\n  *              Check the documentation for how to edit your global styles:              *\n  *                        https://github.com/awdware/gah/wiki                        *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*/');

    this.createSymlinksToDependencies();
    this.addDependenciesToTsConfigFile();
  }

}
