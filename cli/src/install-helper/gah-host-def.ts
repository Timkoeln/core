import { GahModuleBase } from './gah-module-base';
import { GahHost } from '@awdware/gah-shared';
import { GahModuleDef } from './gah-module-def';
import { GahFolder } from './gah-folder';

export class GahHostDef extends GahModuleBase {

  constructor(gahCfgPath: string) {
    super(gahCfgPath, null);

    this.srcBasePath = './src';

    const hostCfg = this.fileSystemService.parseFile<GahHost>(gahCfgPath);
    if (!hostCfg) {
      throw new Error('Cannot find host in file "' + gahCfgPath + '"');
    }
    hostCfg.modules?.forEach(moduleDependency => {
      moduleDependency.names.forEach(moduleName => {
        this.dependencies.push(new GahModuleDef(moduleDependency.path, moduleName));
      });
    });

    this.gahFolder = new GahFolder(this.basePath, this.srcBasePath + '/app');
  }

  public async install() {
    if (this.installed) {
      return;
    }
    this.installed = true;

    this.tsConfigFile.clean();
    this.gahFolder.cleanGeneratedDirectory();
    this.gahFolder.cleanDependencyDirectory();
    this.gahFolder.cleanStylesDirectory();

    this.fileSystemService.deleteFilesInDirectory(this.fileSystemService.join(this.basePath, this.srcBasePath, 'assets'));
    this.fileSystemService.ensureDirectory(this.fileSystemService.join(this.basePath, this.srcBasePath, 'assets'));
    this.fileSystemService.deleteFile(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'));
    this.fileSystemService.saveFile(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'), '/*\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  *   Please do not edit this file. Any changes to this file will be overwriten by gah.   *\n  *              Check the documentation for how to edit your global styles:              *\n  *                        https://github.com/awdware/gah/wiki                        *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*/');

    this.createSymlinksToDependencies();
    this.addDependenciesToTsConfigFile();
    this.generateFromTemplate();
    this.copyAssetsAndBaseStyles();
    this.mergePackageDependencies();
    this.generateStyleImports();
    await this.installPackages();
  }

  private generateFromTemplate() {
    for (const dep of this.dependencies) {
      this.gahFolder.addGeneratedFileTemplateData(dep.moduleName!, dep.isEntry, dep.baseNgModuleName);
    }
    this.gahFolder.generateFileFromTemplate();
  }

  private async installPackages() {
    this.loggerService.startLoadingAnimation('Installing yarn packages');
    const success = await this.executionService.execute('yarn', false);
    if (success) {
      this.loggerService.stopLoadingAnimation(false, true, 'Packages installed successfully');
    } else {
      this.loggerService.stopLoadingAnimation(false, false, 'Installing packages failed');
      this.loggerService.error(this.executionService.executionErrorResult);
    }
  }

  private copyAssetsAndBaseStyles() {
    const stylesScss = this.fileSystemService.readFileLineByLine(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'));

    for (const dep of this.dependencies) {
      if (!dep.facadePathRelativeToBasePath) {
        return;
      }
      // Copying assets
      const absoluteFacadePathOfDep = this.fileSystemService.join(dep.basePath, dep.facadePathRelativeToBasePath);
      const absoluteAssetsFolderOfDep = this.fileSystemService.join(absoluteFacadePathOfDep, 'assets');
      if (this.fileSystemService.directoryExists(absoluteAssetsFolderOfDep)) {
        const hostAssetsFolder = this.fileSystemService.join(this.basePath, this.srcBasePath, 'assets', dep.moduleName!);
        this.fileSystemService.copyFilesInDirectory(absoluteAssetsFolderOfDep, hostAssetsFolder);
      }

      const absoluteStylesFilePathOfDep = this.fileSystemService.join(dep.basePath, dep.facadePathRelativeToBasePath, 'styles.scss');

      // Copying base styles if they exist
      if (this.fileSystemService.fileExists(absoluteStylesFilePathOfDep)) {

        const depAbsoluteSrcFolder = this.fileSystemService.join(dep.basePath, dep.srcBasePath);
        const depAbsoluteFacadeFolder = this.fileSystemService.join(dep.basePath, dep.facadePathRelativeToBasePath);

        const depFacadeFolderRelativeToSrcBase = this.fileSystemService.ensureRelativePath(depAbsoluteFacadeFolder, depAbsoluteSrcFolder, true);

        const moduleFacadePath = this.fileSystemService.join(this.gahFolder.dependencyPath, dep.moduleName!, depFacadeFolderRelativeToSrcBase, 'styles.scss');
        stylesScss.push(`@import "${moduleFacadePath}";`);
      }
    }

    this.fileSystemService.saveFile(this.fileSystemService.join(this.basePath, this.srcBasePath, 'styles.scss'), stylesScss.join('\n'));
  }

}
