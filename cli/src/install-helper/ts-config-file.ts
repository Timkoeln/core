import {
  IFileSystemService,
  TsConfigCompilerOptionsPaths,
  TsConfig,
  TsConfigFileData,
  GahAngularCompilerOptions,
  ICleanupService
} from '@gah/shared';

export class TsConfigFile {
  private readonly _fileSystemService: IFileSystemService;
  private readonly _cleanupService: ICleanupService;

  private readonly _path: string;
  private _tsConfig: TsConfig;

  public getFileContents(): TsConfig {
    return this._tsConfig;
  }

  public data(): TsConfigFileData {
    return {
      path: this._path,
      tsConfig: this._tsConfig
    };
  }

  public async clean() {
    if (!this._tsConfig.compilerOptions.paths) {
      this._tsConfig.compilerOptions.paths = new TsConfigCompilerOptionsPaths();
    }

    const allPaths = Object.keys(this._tsConfig.compilerOptions.paths);
    allPaths.forEach(x => {
      const pathCfg = this._tsConfig.compilerOptions.paths[x];
      if (pathCfg?.some(pathCfgEntry => pathCfgEntry.startsWith('[gah]'))) {
        delete this._tsConfig.compilerOptions.paths[x];
      }
    });

    if (!this._tsConfig.compilerOptions.baseUrl) {
      this._tsConfig.compilerOptions.baseUrl = './';
    }

    return this.save();
  }

  constructor(path: string, fileSystemService: IFileSystemService, cleanupService: ICleanupService) {
    this._fileSystemService = fileSystemService;
    this._cleanupService = cleanupService;
    this._path = path;
  }

  public async init(): Promise<void> {
    this._tsConfig = await this._fileSystemService.parseFile<TsConfig>(this._path);
  }

  public async save() {
    await this._fileSystemService.saveObjectToFile(this._path, this._tsConfig);
  }

  public addPathAlias(aliasName: string, path: string) {
    this._tsConfig.compilerOptions.paths ??= {};
    this._tsConfig.compilerOptions.paths[aliasName] = [path, '[gah] This property was generated by gah'];
  }

  public async setAngularCompilerOptions(options: GahAngularCompilerOptions) {
    this._tsConfig.angularCompilerOptions ??= {} as GahAngularCompilerOptions;

    Object.assign(this._tsConfig.angularCompilerOptions, options);

    await this.save();
  }
}
